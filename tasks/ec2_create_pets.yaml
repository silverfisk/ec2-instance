- block:
  - name: "server {{ item }} for {{ Application }}"
    ec2_instance:
      name: "{{ item }}"
      region: "{{ AWSRegion }}"
      key_name: "{{ ec2_pets[item].ssh_key }}"
      security_groups: "{{ ec2_pets[item].security_groups | default(omit) }}"
      instance_type: "{{ ec2_pets[item].instance_type }}"
      termination_protection : "{{ ec2_pets[item].termination_protection }}"
      image_id: "{{ ec2_pets[item].instance_ami }}"
      state: "{{ ec2_pets[item].state | default(omit) }}"
      volumes: "{{ ec2_pets[item].volumes | default(omit) }}"
      wait: "{{ ec2_pets[item].wait }}"
      wait_timeout: 500
      tags:
        Name: "{{ item }}"
        EnvironmentClass: "{{ EnvironmentClass }}"
        Owner: "{{ OwnerEmail }}"
        CostCenter: "{{ CostCenter }}"
        Application: "{{ Application }}"
        Tier: "{{ ApplicationTier }}"
        Description: "{{ ec2_pets[item].description }}"
      detailed_monitoring: "{{ ec2_pets[item].monitoring }}"
      # state: "{{ ec2_pets[item].state }}"
      vpc_subnet_id: "{{ ec2_pets[item].vpc_subnet_id }}"
      network:
        assign_public_ip: no            # We hardcode this here intentionally

  - name: "Query API for running {{ item }} instances"
    ec2_instance_facts:
      filters:
        "tag:Name": "{{ item }}"
        "tag:CostCenter": "{{ CostCenter }}"
        "instance-state-name": running
    register: ec2_servers

  # Add servers to ec2_pets hostsgroup
  - name: Add new instance to host group ec2_pets
    add_host:
      hostname: "{{ hostitem.private_ip_address }}"
      groupname: ec2_pets
      yum_packages: "{{ ec2_pets[item].yum_packages | default(omit) }}"
      volumes: "{{ ec2_pets[item].volumes | default(omit) }}"
      limits: "{{ ec2_pets[item].limits | default(omit) }}"  # set variable, or omit it if undefined
    with_items: "{{ ec2_servers.instances }}"
    loop_control:
      loop_var: hostitem
    changed_when: false

  - name: "Wait for {{ item }} to become available on port 22"
    wait_for:
      host: "{{ hostitem.private_ip_address }}"
      port: 22
      # delay: 10
    with_items: "{{ ec2_servers.instances }}"
    loop_control:
      loop_var: hostitem